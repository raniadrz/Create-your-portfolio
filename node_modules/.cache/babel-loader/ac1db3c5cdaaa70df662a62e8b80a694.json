{"ast":null,"code":"// src/index.ts\nvar hasSetup = false;\nvar modality = null;\nvar hasEventBeforeFocus = false;\nvar handlers = /* @__PURE__ */new Set();\nvar isMac = typeof window !== \"undefined\" && window.navigator != null ? /^Mac/.test(window.navigator.platform) : false;\nfunction isValidKey(event) {\n  return !(event.metaKey || !isMac && event.altKey || event.ctrlKey);\n}\nfunction trigger(modality2, event) {\n  handlers.forEach(handler => handler(modality2, event));\n}\nfunction onKeyboardEvent(event) {\n  hasEventBeforeFocus = true;\n  if (isValidKey(event)) {\n    modality = \"keyboard\";\n    trigger(\"keyboard\", event);\n  }\n}\nfunction onPointerEvent(event) {\n  modality = \"pointer\";\n  if (event.type === \"mousedown\" || event.type === \"pointerdown\") {\n    hasEventBeforeFocus = true;\n    trigger(\"pointer\", event);\n  }\n}\nfunction onWindowFocus(event) {\n  if (event.target === window || event.target === document) {\n    return;\n  }\n  if (!hasEventBeforeFocus) {\n    modality = \"keyboard\";\n    trigger(\"keyboard\", event);\n  }\n  hasEventBeforeFocus = false;\n}\nfunction onWindowBlur() {\n  hasEventBeforeFocus = false;\n}\nfunction isFocusVisible() {\n  return modality !== \"pointer\";\n}\nfunction setupGlobalFocusEvents() {\n  if (typeof window === \"undefined\" || hasSetup) {\n    return;\n  }\n  const {\n    focus\n  } = HTMLElement.prototype;\n  HTMLElement.prototype.focus = function focusElement(...args) {\n    hasEventBeforeFocus = true;\n    focus.apply(this, args);\n  };\n  document.addEventListener(\"keydown\", onKeyboardEvent, true);\n  document.addEventListener(\"keyup\", onKeyboardEvent, true);\n  window.addEventListener(\"focus\", onWindowFocus, true);\n  window.addEventListener(\"blur\", onWindowBlur, false);\n  if (typeof PointerEvent !== \"undefined\") {\n    document.addEventListener(\"pointerdown\", onPointerEvent, true);\n    document.addEventListener(\"pointermove\", onPointerEvent, true);\n    document.addEventListener(\"pointerup\", onPointerEvent, true);\n  } else {\n    document.addEventListener(\"mousedown\", onPointerEvent, true);\n    document.addEventListener(\"mousemove\", onPointerEvent, true);\n    document.addEventListener(\"mouseup\", onPointerEvent, true);\n  }\n  hasSetup = true;\n}\nfunction trackFocusVisible(fn) {\n  setupGlobalFocusEvents();\n  fn(isFocusVisible());\n  const handler = () => fn(isFocusVisible());\n  handlers.add(handler);\n  return () => {\n    handlers.delete(handler);\n  };\n}\nexport { trackFocusVisible };","map":{"version":3,"names":["hasSetup","modality","hasEventBeforeFocus","handlers","Set","isMac","window","navigator","test","platform","isValidKey","event","metaKey","altKey","ctrlKey","trigger","modality2","forEach","handler","onKeyboardEvent","onPointerEvent","type","onWindowFocus","target","document","onWindowBlur","isFocusVisible","setupGlobalFocusEvents","focus","HTMLElement","prototype","focusElement","args","apply","addEventListener","PointerEvent","trackFocusVisible","fn","add","delete"],"sources":["/Users/ouraniantrizi/Documents/Create-your-portfolio/node_modules/@zag-js/focus-visible/src/index.ts"],"sourcesContent":["type Modality = \"keyboard\" | \"pointer\"\ntype HandlerEvent = PointerEvent | MouseEvent | KeyboardEvent | FocusEvent\ntype Handler = (modality: Modality, e: HandlerEvent) => void\ntype FocusVisibleCallback = (isFocusVisible: boolean) => void\n\nlet hasSetup = false\nlet modality: Modality | null = null\nlet hasEventBeforeFocus = false\n\nconst handlers = new Set<Handler>()\n\nconst isMac = typeof window !== \"undefined\" && window.navigator != null ? /^Mac/.test(window.navigator.platform) : false\n\nfunction isValidKey(event: KeyboardEvent) {\n  return !(event.metaKey || (!isMac && event.altKey) || event.ctrlKey)\n}\n\nfunction trigger(modality: Modality, event: HandlerEvent) {\n  handlers.forEach((handler) => handler(modality, event))\n}\n\nfunction onKeyboardEvent(event: KeyboardEvent) {\n  hasEventBeforeFocus = true\n  if (isValidKey(event)) {\n    modality = \"keyboard\"\n    trigger(\"keyboard\", event)\n  }\n}\n\nfunction onPointerEvent(event: PointerEvent | MouseEvent) {\n  modality = \"pointer\"\n  if (event.type === \"mousedown\" || event.type === \"pointerdown\") {\n    hasEventBeforeFocus = true\n    trigger(\"pointer\", event)\n  }\n}\n\nfunction onWindowFocus(event: FocusEvent) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (event.target === window || event.target === document) {\n    return\n  }\n\n  // If a focus event occurs without a preceding keyboard or pointer event, switch to keyboard modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n  if (!hasEventBeforeFocus) {\n    modality = \"keyboard\"\n    trigger(\"keyboard\", event)\n  }\n\n  hasEventBeforeFocus = false\n}\n\nfunction onWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  hasEventBeforeFocus = false\n}\n\nfunction isFocusVisible() {\n  return modality !== \"pointer\"\n}\n\nfunction setupGlobalFocusEvents() {\n  if (typeof window === \"undefined\" || hasSetup) {\n    return\n  }\n\n  // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n  const { focus } = HTMLElement.prototype\n  HTMLElement.prototype.focus = function focusElement(...args) {\n    hasEventBeforeFocus = true\n    focus.apply(this, args)\n  }\n\n  document.addEventListener(\"keydown\", onKeyboardEvent, true)\n  document.addEventListener(\"keyup\", onKeyboardEvent, true)\n\n  // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n  window.addEventListener(\"focus\", onWindowFocus, true)\n  window.addEventListener(\"blur\", onWindowBlur, false)\n\n  if (typeof PointerEvent !== \"undefined\") {\n    document.addEventListener(\"pointerdown\", onPointerEvent, true)\n    document.addEventListener(\"pointermove\", onPointerEvent, true)\n    document.addEventListener(\"pointerup\", onPointerEvent, true)\n  } else {\n    document.addEventListener(\"mousedown\", onPointerEvent, true)\n    document.addEventListener(\"mousemove\", onPointerEvent, true)\n    document.addEventListener(\"mouseup\", onPointerEvent, true)\n  }\n\n  hasSetup = true\n}\n\nexport function trackFocusVisible(fn: FocusVisibleCallback) {\n  setupGlobalFocusEvents()\n\n  fn(isFocusVisible())\n  const handler = () => fn(isFocusVisible())\n\n  handlers.add(handler)\n  return () => {\n    handlers.delete(handler)\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}